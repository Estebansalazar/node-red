[{"id":"aa063fe8.428978","type":"template","name":"Flow list","field":"payload","format":"html","template":"<html>\n<head><title>BlueMix Node-RED flow exporter</title></head>\n<body>\n<img src=\"red/red/images/node-red.png\"/>\n<h2>There are {{tabs.length}} flows:</h2>\n<ul>\n{{#tabs}}\n    <li>\n        Export <a href=\"{{req._parsedUrl.pathname}}?tabid={{id}}\">{{label}}</a>: {{nodes.length}} nodes\n        {{#nodes}}\n        {{#url}}\n        Start <a href=\"http://{{req.headers.host}}{{url}}\" target=\"_blank\">{{url}}</a>\n        {{/url}}\n        {{/nodes}}\n    </li>\n{{/tabs}}\n</ul>\n<h1>REQ</h1>\n<pre>{{reqStr}}</pre>\n<h1>RES</h1>\n<pre>{{resStr}}</pre>\n</body>\n</html>","x":678,"y":262,"wires":[["4af87d2f.5b3444"]]},{"id":"9238808f.7a72a8","type":"http in","name":"","url":"/flowexp","method":"get","swaggerDoc":"","x":72,"y":116,"wires":[["24d2b34f.acd3c4"]]},{"id":"4af87d2f.5b3444","type":"http response","name":"WebList","x":832,"y":259,"wires":[]},{"id":"2466914a.a9b0ee","type":"cloudant in","service":"AntiRED-cloudantNoSQLDB","cloudant":"","name":"Get flows","database":"nodered","search":"_id_","design":"","index":"","x":334,"y":179,"wires":[["4ebfe0bb.278f1"]]},{"id":"24d2b34f.acd3c4","type":"change","name":"Set _id","rules":[{"t":"set","p":"tabid","to":"msg.payload.tabid"},{"t":"set","p":"payload","to":"AntiRED/flow"}],"action":"","property":"","from":"","to":"","reg":false,"x":207,"y":180,"wires":[["2466914a.a9b0ee"]]},{"id":"6fecf8f5.bd0958","type":"function","name":"List flows","func":"msg.reqStr=util.inspect(msg.req);\nmsg.resStr=util.inspect(msg.res);\n\nvar tabs=[];\n\nfor(var iF in msg.payload.flow) {\n    var flow=msg.payload.flow[iF];\n    if(flow.type == \"tab\") {\n        flow.nodes=[];\n        tabs.push(flow);\n    } else if(flow.z!==null) {\n        // this is part of tab\n        for(var iT in tabs) {\n            var tab=tabs[iT];\n            if(tab.id==flow.z) {\n                tab.nodes.push(flow);\n            }\n            //node.warn(util.inspect(flow));\n        }\n    }\n}\nmsg.tabs=tabs;\nreturn msg;","outputs":1,"noerr":0,"x":493,"y":266,"wires":[["aa063fe8.428978"]]},{"id":"196e0bd0.a4e0a4","type":"http response","name":"jsonfile","x":836,"y":320,"wires":[]},{"id":"fc343321.efadf8","type":"function","name":"Extract flow nodes","func":"var tabid=msg.tabid;\nvar tab;\n\n// find the tab and its nodes\n// nodes belong to a tab when their z is the tab id\n// this assumes tabs are always returned before nodes...\n// we could also do with a replacer that filters on tabids\nfor(var iF in msg.payload.flow) {\n    var flow=msg.payload.flow[iF];\n    if(flow.type == \"tab\" && flow.id==tabid) {\n        flow.nodes=[];\n        tab=flow;\n    } else if(flow.z!==null && flow.z==tabid) {\n        // this is part of tab\n        if(tab.id==flow.z) {\n            tab.nodes.push(flow);\n        }\n    }\n}\n\n// stash tab for later use\nmsg.tab=tab;\n\n// z is no more needed, and x and y rounded to integer\nfunction replacer(key, value) {\n    // round x, y and drop z\n    if (key === \"z\") {\n        return undefined;\n    } else if (typeof value === \"number\") {\n        return Math.round(value);\n    }\n  \n    return value;\n}\n\n// Stringify the node with replacement\nmsg.payload=JSON.stringify(tab.nodes,replacer);\n\nreturn msg;","outputs":1,"noerr":0,"x":338,"y":387,"wires":[["20a41a95.b9f9d6"]]},{"id":"4ebfe0bb.278f1","type":"switch","name":"Check tabid","property":"tabid","rules":[{"t":"null"},{"t":"else"}],"checkall":"false","outputs":2,"x":258,"y":298,"wires":[["6fecf8f5.bd0958"],["fc343321.efadf8"]]},{"id":"e10373f.f5eb19","type":"comment","name":"Setup Instructions","info":"Make sure to replace `XXX` by your own NODE-RED app name in `Set _id` and `Get flows` nodes","x":276,"y":145,"wires":[]},{"id":"4f565c65.e0a7fc","type":"function","name":"Pretty flow to file","func":"// pretty-format the flow\nmsg.payload=JSON.stringify(msg.payload);\n\n// Note that somehow inspect does not work, the flow cannot be reimported\n//msg.payload=util.inspect(msg.payload,{ depth: null });\n// this makes it look nicer in windows, when run with inspect\n//msg.payload=msg.payload=replace(/\\n/g,'\\r\\n');\n\n// setup for attachment return\nvar flowname=encodeURIComponent(msg.tab.label.replace(' ','_'));\n\nvar attch='attachment; filename='+flowname+'.json';\nmsg.headers={// 'content-length': '123',\n    'content-type': 'application/octet-stream',\n    'content-disposition': attch};\n\nreturn msg;","outputs":1,"noerr":0,"x":695,"y":394,"wires":[["196e0bd0.a4e0a4"]]},{"id":"20a41a95.b9f9d6","type":"json","name":"flow back to object","x":522,"y":319,"wires":[["4f565c65.e0a7fc"]]}]